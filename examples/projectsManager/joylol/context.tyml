# This is a ComputePods Tasks file. It is an example of what might be
# automatically created by the ConTeXt typesetter to provide additional
# definition of which artefacts it depends on and which "additional"
# artefacts it automatically generates. This is similar in principle to
# the C/C++ type dependency file system.

# Rules files provide *generic* information about how to execute build
# tasks from artefacts. Rules files are located in a Chef's rules
# directory (and hence outside of a user's ability to change).

# Task files specify build tasks to help the ComputePods system to
# complete its artefact dependency graph. Task files are a physical, on
# disk artefact which is an alternative to a build tasks command tool
# issuing its own NATS messages to define new build tasks. Task files are
# located in the Project directory hierarchy.

# Task files may ONLY specify specific artefacts (and not "generic"
# artefact types), Rules files *may* contain both specific and generic
# artefacts. Specific artefacts are artefacts specifications which are not
# registered as an artefact type.

tasks:
  context:
    rule: context
    dependencies:
      - joylol.tex  # primary dependencies
      #
      # The following are pre-existing inputs which are required but not
      # explicitly declared in the main project rules. (The build will
      # fail if one or more of these inputs do not exist)
      #
      - memory/memory.tex
      - parser/parser.tex
      - base/strings.tex
      - base/contexts.tex
      - base/functions.tex
      - interpreter/interpreter.tex
    secondaryDependencies:
      - joylol.lua # multi-pass input (used only if it exists)
      #
      # The following are inputs generated by later steps in the build
      # graph (used only if they exist)
      #
      - memory/memory.jout
      - parser/parser.jout
      - base/strings.jout
      - base/contexts.jout
      - base/cFunctions.jout
      - base/luaFunctions.jout
      - base/joylolFunctions.jout
      - interpreter/interpreter.jout
    outputs:
      - joylol.pdf  # primary output
      - joylol.lua  # multi-pass output
      #
      # The following are generated code used elsewhere in the build graph
      #
      - memory/memory.c
      - memory/memory.h
      - memory/memory.joy
      - parser/parser.c
      - parser/parser.h
      - parser/parser.joy
      - base/strings.c
      - base/strings.h
      - base/strings.joy
      - base/contexts.c
      - base/contexts.h
      - base/contexts.joy
      - base/cFunctions.c
      - base/cFunctions.h
      - base/cFunctions.joy
      - base/luaFunctions.c
      - base/luaFunctions.h
      - base/luaFunctions.joy
      - base/joylolFunctions.c
      - base/joylolFunctions.h
      - base/joylolFunctions.joy
      - interpreter/interpreter.c
      - interpreter/interpreter.h
      - interpreter/interpreter.joy
